/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/
/**
 * This is a fork of the Karpathy's TSNE.js (original license below).
 * This fork implements Barnes-Hut approximation and runs in O(NlogN)
 * time, as opposed to the Karpathy's O(N^2) version.
 *
 * Please refer to third_party/bh_tsne.LICENSE for the original license.
 *
 * @author smilkov@google.com (Daniel Smilkov)
 */
import { SPTree } from './sptree';
/**
 * Barnes-hut approximation level. Higher means more approximation and faster
 * results. Recommended value mentioned in the paper is 0.8.
 */
const THETA = 0.8;
const MIN_POSSIBLE_PROB = 1e-9;
// Variables used for memorizing the second random number since running
// gaussRandom() generates two random numbers at the cost of 1 atomic
// computation. This optimization results in 2X speed-up of the generator.
let return_v = false;
let v_val = 0;
/** Returns the square euclidean distance between two vectors. */
export function dist2(a, b) {
    if (a.length !== b.length) {
        throw new Error('Vectors a and b must be of same length');
    }
    let result = 0;
    for (let i = 0; i < a.length; ++i) {
        let diff = a[i] - b[i];
        result += diff * diff;
    }
    return result;
}
/** Returns the square euclidean distance between two 2D points. */
export function dist2_2D(a, b) {
    let dX = a[0] - b[0];
    let dY = a[1] - b[1];
    return dX * dX + dY * dY;
}
/** Returns the square euclidean distance between two 3D points. */
export function dist2_3D(a, b) {
    let dX = a[0] - b[0];
    let dY = a[1] - b[1];
    let dZ = a[2] - b[2];
    return dX * dX + dY * dY + dZ * dZ;
}
function gaussRandom(rng) {
    if (return_v) {
        return_v = false;
        return v_val;
    }
    let u = 2 * rng() - 1;
    let v = 2 * rng() - 1;
    let r = u * u + v * v;
    if (r === 0 || r > 1) {
        return gaussRandom(rng);
    }
    let c = Math.sqrt((-2 * Math.log(r)) / r);
    v_val = v * c; // cache this for next function call for efficiency
    return_v = true;
    return u * c;
}
// return random normal number
function randn(rng, mu, std) {
    return mu + gaussRandom(rng) * std;
}
// utilitity that creates contiguous vector of zeros of size n
function zeros(n) {
    return new Float64Array(n);
}
// utility that returns a matrix filled with random numbers
// generated by the provided generator.
function randnMatrix(n, d, rng) {
    let nd = n * d;
    let x = zeros(nd);
    for (let i = 0; i < nd; ++i) {
        x[i] = randn(rng, 0, 0.0001);
    }
    return x;
}
// utility that returns a matrix filled with the provided value.
function arrayofs(n, d, val) {
    let x = [];
    for (let i = 0; i < n; ++i) {
        x.push(d === 3 ? [val, val, val] : [val, val]);
    }
    return x;
}
// compute (p_{i|j} + p_{j|i})/(2n)
function nearest2P(nearest, perplexity, tol) {
    let N = nearest.length;
    let Htarget = Math.log(perplexity); // target entropy of distribution
    let P = zeros(N * N); // temporary probability matrix
    let K = nearest[0].length;
    let pRow = new Array(K); // pij[].
    for (let i = 0; i < N; ++i) {
        let neighbors = nearest[i];
        let betaMin = -Infinity;
        let betaMax = Infinity;
        let beta = 1; // initial value of precision
        let maxTries = 50;
        // perform binary search to find a suitable precision beta
        // so that the entropy of the distribution is appropriate
        let numTries = 0;
        while (true) {
            // compute entropy and kernel row with beta precision
            let psum = 0;
            for (let k = 0; k < neighbors.length; ++k) {
                let neighbor = neighbors[k];
                let pij = i === neighbor.index ? 0 : Math.exp(-neighbor.dist * beta);
                pij = Math.max(pij, MIN_POSSIBLE_PROB);
                pRow[k] = pij;
                psum += pij;
            }
            // normalize p and compute entropy
            let Hhere = 0;
            for (let k = 0; k < pRow.length; ++k) {
                pRow[k] /= psum;
                let pij = pRow[k];
                if (pij > 1e-7) {
                    Hhere -= pij * Math.log(pij);
                }
            }
            // adjust beta based on result
            if (Hhere > Htarget) {
                // entropy was too high (distribution too diffuse)
                // so we need to increase the precision for more peaky distribution
                betaMin = beta; // move up the bounds
                if (betaMax === Infinity) {
                    beta = beta * 2;
                }
                else {
                    beta = (beta + betaMax) / 2;
                }
            }
            else {
                // converse case. make distrubtion less peaky
                betaMax = beta;
                if (betaMin === -Infinity) {
                    beta = beta / 2;
                }
                else {
                    beta = (beta + betaMin) / 2;
                }
            }
            numTries++;
            // stopping conditions: too many tries or got a good precision
            if (numTries >= maxTries || Math.abs(Hhere - Htarget) < tol) {
                break;
            }
        }
        // copy over the final prow to P at row i
        for (let k = 0; k < pRow.length; ++k) {
            let pij = pRow[k];
            let j = neighbors[k].index;
            P[i * N + j] = pij;
        }
    } // end loop over examples i
    // symmetrize P and normalize it to sum to 1 over all ij
    let N2 = N * 2;
    for (let i = 0; i < N; ++i) {
        for (let j = i + 1; j < N; ++j) {
            let i_j = i * N + j;
            let j_i = j * N + i;
            let value = (P[i_j] + P[j_i]) / N2;
            P[i_j] = value;
            P[j_i] = value;
        }
    }
    return P;
}
// helper function
function sign(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
}
function computeForce_2d(force, mult, pointA, pointB) {
    force[0] += mult * (pointA[0] - pointB[0]);
    force[1] += mult * (pointA[1] - pointB[1]);
}
function computeForce_3d(force, mult, pointA, pointB) {
    force[0] += mult * (pointA[0] - pointB[0]);
    force[1] += mult * (pointA[1] - pointB[1]);
    force[2] += mult * (pointA[2] - pointB[2]);
}
export class TSNE {
    constructor(opt) {
        this.iter = 0;
        opt = opt || { dim: 2 };
        this.perplexity = opt.perplexity || 30;
        this.epsilon = opt.epsilon || 10;
        this.rng = opt.rng || Math.random;
        this.dim = opt.dim;
        if (opt.dim === 2) {
            this.dist2 = dist2_2D;
            this.computeForce = computeForce_2d;
        }
        else if (opt.dim === 3) {
            this.dist2 = dist2_3D;
            this.computeForce = computeForce_3d;
        }
        else {
            throw new Error('Only 2D and 3D is supported');
        }
    }
    // this function takes a fattened distance matrix and creates
    // matrix P from them.
    // D is assumed to be provided as an array of size N^2.
    initDataDist(nearest) {
        let N = nearest.length;
        this.nearest = nearest;
        this.P = nearest2P(nearest, this.perplexity, 0.0001);
        this.N = N;
        this.initSolution(); // refresh this
    }
    // (re)initializes the solution to random
    initSolution() {
        // generate random solution to t-SNE
        this.Y = randnMatrix(this.N, this.dim, this.rng); // the solution
        this.gains = arrayofs(this.N, this.dim, 1); // step gains
        // to accelerate progress in unchanging directions
        this.ystep = arrayofs(this.N, this.dim, 0); // momentum accumulator
        this.iter = 0;
    }
    getDim() {
        return this.dim;
    }
    // return pointer to current solution
    getSolution() {
        return this.Y;
    }
    // For each point, randomly offset point within a 5% hypersphere centered
    // around it, whilst remaining in the assumed t-SNE plot hypersphere
    perturb() {
        let N = this.N;
        let maxArea = 0;
        let ymean = this.dim === 3 ? [0, 0, 0] : [0, 0];
        // Determine radius of t-SNE hypersphere, assumed zero mean and normalized
        // dimensions. Here area is proportional to pi*radius^2, to skip root calc.
        for (let i = 0; i < N; ++i) {
            let area = 0;
            for (let d = 0; d < this.dim; ++d) {
                area += Math.pow(this.Y[i * this.dim + d], 2);
            }
            if (area > maxArea) {
                maxArea = area;
            }
        }
        let maxRadius = Math.pow(maxArea, 0.5);
        for (let i = 0; i < N; ++i) {
            let diff = new Array(this.dim);
            // Find a perturbation of point that fits inside t-SNE hypersphere
            while (true) {
                let area = 0;
                for (let d = 0; d < this.dim; ++d) {
                    diff[d] = 0.1 * maxRadius * (Math.random() - 0.5);
                    area += Math.pow(this.Y[i * this.dim + d] + diff[d], 2);
                }
                if (area < maxArea) {
                    break;
                }
            }
            // Apply offset to point
            for (let d = 0; d < this.dim; ++d) {
                this.Y[i * this.dim + d] += diff[d];
                ymean[d] += this.Y[i * this.dim + d];
            }
        }
        // reproject Y to be zero mean
        for (let i = 0; i < N; ++i) {
            for (let d = 0; d < this.dim; ++d) {
                this.Y[i * this.dim + d] -= ymean[d] / N;
            }
        }
    }
    // perform a single step of optimization to improve the embedding
    step() {
        this.iter += 1;
        let N = this.N;
        let grad = this.costGrad(this.Y); // evaluate gradient
        // perform gradient step
        let ymean = this.dim === 3 ? [0, 0, 0] : [0, 0];
        for (let i = 0; i < N; ++i) {
            for (let d = 0; d < this.dim; ++d) {
                let gid = grad[i][d];
                let sid = this.ystep[i][d];
                let gainid = this.gains[i][d];
                // compute gain update
                let newgain = sign(gid) === sign(sid) ? gainid * 0.8 : gainid + 0.2;
                if (newgain < 0.01) {
                    newgain = 0.01; // clamp
                }
                this.gains[i][d] = newgain; // store for next turn
                // compute momentum step direction
                let momval = this.iter < 250 ? 0.5 : 0.8;
                let newsid = momval * sid - this.epsilon * newgain * grad[i][d];
                this.ystep[i][d] = newsid; // remember the step we took
                // step!
                let i_d = i * this.dim + d;
                this.Y[i_d] += newsid;
                ymean[d] += this.Y[i_d]; // accumulate mean so that we
                // can center later
            }
        }
        // reproject Y to be zero mean
        for (let i = 0; i < N; ++i) {
            for (let d = 0; d < this.dim; ++d) {
                this.Y[i * this.dim + d] -= ymean[d] / N;
            }
        }
    }
    setSupervision(superviseLabels, superviseInput) {
        if (superviseLabels != null) {
            this.labels = superviseLabels;
            this.labelCounts = {};
            let uniqueEntries = Array.from(new Set(superviseLabels));
            uniqueEntries.forEach((l) => (this.labelCounts[l] = 0));
            superviseLabels.forEach((l) => (this.labelCounts[l] += 1));
        }
        if (superviseInput != null) {
            this.unlabeledClass = superviseInput;
        }
    }
    setSuperviseFactor(superviseFactor) {
        if (superviseFactor != null) {
            this.superviseFactor = superviseFactor;
        }
    }
    // return cost and gradient, given an arrangement
    costGrad(Y) {
        let N = this.N;
        let P = this.P;
        // Trick that helps with local optima.
        let alpha = this.iter < 100 ? 4 : 1;
        let superviseFactor = this.superviseFactor / 100; // set in range [0, 1]
        let unlabeledClass = this.unlabeledClass;
        let labels = this.labels;
        let labelCounts = this.labelCounts;
        let supervised = superviseFactor != null &&
            superviseFactor > 0 &&
            labels != null &&
            labelCounts != null;
        let unlabeledCount = supervised && unlabeledClass != null && unlabeledClass !== ''
            ? labelCounts[unlabeledClass]
            : 0;
        // Make data for the SP tree.
        let points = new Array(N); // (x, y)[]
        for (let i = 0; i < N; ++i) {
            let iTimesD = i * this.dim;
            let row = new Array(this.dim);
            for (let d = 0; d < this.dim; ++d) {
                row[d] = Y[iTimesD + d];
            }
            points[i] = row;
        }
        // Make a tree.
        let tree = new SPTree(points);
        let root = tree.root;
        // Annotate the tree.
        let annotateTree = (node) => {
            let numCells = 1;
            if (node.children == null) {
                // Update the current node and tell the parent.
                node.numCells = numCells;
                node.yCell = node.point;
                return { numCells, yCell: node.yCell };
            }
            // node.point is a 2 or 3-dim number[], so slice() makes a copy.
            let yCell = node.point.slice();
            for (let i = 0; i < node.children.length; ++i) {
                let child = node.children[i];
                if (child == null) {
                    continue;
                }
                let result = annotateTree(child);
                numCells += result.numCells;
                for (let d = 0; d < this.dim; ++d) {
                    yCell[d] += result.yCell[d];
                }
            }
            // Update the node and tell the parent.
            node.numCells = numCells;
            node.yCell = yCell.map((v) => v / numCells);
            return { numCells, yCell };
        };
        // Augment the tree with more info.
        annotateTree(root);
        tree.visit((node, low, high) => {
            node.rCell = high[0] - low[0];
            return false;
        });
        // compute current Q distribution, unnormalized first
        let grad = [];
        let Z = 0;
        let sum_pij = 0;
        let forces = new Array(N);
        for (let i = 0; i < N; ++i) {
            let pointI = points[i];
            if (supervised) {
                var sameCount = labelCounts[labels[i]];
                var otherCount = N - sameCount - unlabeledCount;
            }
            // Compute the positive forces for the i-th node.
            let Fpos = this.dim === 3 ? [0, 0, 0] : [0, 0];
            let neighbors = this.nearest[i];
            for (let k = 0; k < neighbors.length; ++k) {
                let j = neighbors[k].index;
                let pij = P[i * N + j];
                // apply semi-supervised prior probabilities
                if (supervised) {
                    if (labels[i] === unlabeledClass || labels[j] === unlabeledClass) {
                        pij *= 1 / N;
                    }
                    else if (labels[i] !== labels[j]) {
                        pij *= Math.max(1 / N - superviseFactor / otherCount, 1e-7);
                    }
                    else if (labels[i] === labels[j]) {
                        pij *= Math.min(1 / N + superviseFactor / sameCount, 1 - 1e-7);
                    }
                    sum_pij += pij;
                }
                let pointJ = points[j];
                let squaredDistItoJ = this.dist2(pointI, pointJ);
                let premult = pij / (1 + squaredDistItoJ);
                this.computeForce(Fpos, premult, pointI, pointJ);
            }
            // Compute the negative forces for the i-th node.
            let FnegZ = this.dim === 3 ? [0, 0, 0] : [0, 0];
            tree.visit((node) => {
                let squaredDistToCell = this.dist2(pointI, node.yCell);
                // Squared distance from point i to cell.
                if (node.children == null ||
                    (squaredDistToCell > 0 &&
                        node.rCell / Math.sqrt(squaredDistToCell) < THETA)) {
                    let qijZ = 1 / (1 + squaredDistToCell);
                    let dZ = node.numCells * qijZ;
                    Z += dZ;
                    dZ *= qijZ;
                    this.computeForce(FnegZ, dZ, pointI, node.yCell);
                    return true;
                }
                // Cell is too close to approximate.
                let squaredDistToPoint = this.dist2(pointI, node.point);
                let qijZ = 1 / (1 + squaredDistToPoint);
                Z += qijZ;
                qijZ *= qijZ;
                this.computeForce(FnegZ, qijZ, pointI, node.point);
                return false;
            }, true);
            forces[i] = [Fpos, FnegZ];
        }
        // Normalize the negative forces and compute the gradient.
        let A = 4 * alpha;
        if (supervised) {
            A /= sum_pij;
        }
        const B = 4 / Z;
        for (let i = 0; i < N; ++i) {
            let [FPos, FNegZ] = forces[i];
            let gsum = new Array(this.dim);
            for (let d = 0; d < this.dim; ++d) {
                gsum[d] = A * FPos[d] - B * FNegZ[d];
            }
            grad.push(gsum);
        }
        return grad;
    }
}
//# sourceMappingURL=data:application/json;base64,