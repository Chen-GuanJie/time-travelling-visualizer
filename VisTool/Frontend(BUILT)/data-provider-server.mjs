import { retrieveSpriteAndMetadataInfo, retrieveTensorAsBytes, } from './data-provider';
import * as logging from './logging';
// Limit for the number of data points we receive from the server.
export const LIMIT_NUM_POINTS = 100000;
/**
 * Data provider that loads data provided by a python server (usually backed
 * by a checkpoint file).
 */
export class ServerDataProvider {
    constructor(routePrefix) {
        this.runProjectorConfigCache = {};
        this.routePrefix = routePrefix;
    }
    getEmbeddingInfo(run, tensorName, callback) {
        this.retrieveProjectorConfig(run, (config) => {
            const embeddings = config.embeddings;
            for (let i = 0; i < embeddings.length; i++) {
                const embedding = embeddings[i];
                if (embedding.tensorName === tensorName) {
                    callback(embedding);
                    return;
                }
            }
            callback(null);
        });
    }
    retrieveRuns(callback) {
        const msgId = logging.setModalMessage('Fetching runs...');
        const xhr = new XMLHttpRequest();
        xhr.open('GET', `${this.routePrefix}/runs`);
        xhr.onerror = (err) => {
            logging.setErrorMessage(xhr.responseText, 'fetching runs');
        };
        xhr.onload = () => {
            const runs = JSON.parse(xhr.responseText);
            logging.setModalMessage(null, msgId);
            callback(runs);
        };
        xhr.send();
    }
    retrieveProjectorConfig(run, callback) {
        if (run in this.runProjectorConfigCache) {
            callback(this.runProjectorConfigCache[run]);
            return;
        }
        const msgId = logging.setModalMessage('Fetching projector config...');
        const xhr = new XMLHttpRequest();
        xhr.open('GET', `${this.routePrefix}/info?run=${run}`);
        xhr.onerror = (err) => {
            logging.setErrorMessage(xhr.responseText, 'fetching projector config');
        };
        xhr.onload = () => {
            const config = JSON.parse(xhr.responseText);
            logging.setModalMessage(null, msgId);
            this.runProjectorConfigCache[run] = config;
            callback(config);
        };
        xhr.send();
    }
    retrieveTensor(run, tensorName, callback) {
        this.getEmbeddingInfo(run, tensorName, (embedding) => {
            retrieveTensorAsBytes(this, embedding, run, tensorName, `${this.routePrefix}/tensor?run=${run}&name=${tensorName}` +
                `&num_rows=${LIMIT_NUM_POINTS}`, callback);
        });
    }
    retrieveSpriteAndMetadata(run, tensorName, callback) {
        this.getEmbeddingInfo(run, tensorName, (embedding) => {
            let metadataPath = null;
            if (embedding.metadataPath) {
                metadataPath =
                    `${this.routePrefix}/metadata?` +
                        `run=${run}&name=${tensorName}&num_rows=${LIMIT_NUM_POINTS}`;
            }
            let spriteImagePath = null;
            if (embedding.sprite && embedding.sprite.imagePath) {
                spriteImagePath = `${this.routePrefix}/sprite_image?run=${run}&name=${tensorName}`;
            }
            retrieveSpriteAndMetadataInfo(metadataPath, spriteImagePath, embedding.sprite, callback);
        });
    }
    getBookmarks(run, tensorName, callback) {
        const msgId = logging.setModalMessage('Fetching bookmarks...');
        const xhr = new XMLHttpRequest();
        xhr.open('GET', `${this.routePrefix}/bookmarks?run=${run}&name=${tensorName}`);
        xhr.onerror = (err) => {
            logging.setErrorMessage(xhr.responseText, 'fetching bookmarks');
        };
        xhr.onload = () => {
            logging.setModalMessage(null, msgId);
            const bookmarks = JSON.parse(xhr.responseText);
            callback(bookmarks);
        };
        xhr.send();
    }
}
//# sourceMappingURL=data:application/json;base64,